# This is an example of State-of-War Remastered game map extra information file.

# Use # to comment, no characters after the # symbol including itself is loaded.

# The blocks are designed to optimize.
# When a block is loaded, it is automatically a definition pool, and all the elements within a pair of {} bracelets will become a subelement of the block.
# For example,

# [block]
# {
#	 element = value
# }

# parses as block.element = value

# As for value, if you have some values require more than one line, you can use {} to do so, but remember to add a '@' symbol after the '='.
# The bracelets will not be loaded.

# All the blocks and elements including their names shown in this example file are reserved by the program.


# The Global Flags Block
# It contains most global factors of the map. If a flag present in the block without value,
# it is loaded and verified as true. All the flags are listed below.
[global]
{
	single_player_only
	# This map can only be loaded as a single player map. Default.

	multi_player_only
	# This map can only be loaded as a multiple player map. This and single_player cannot exist in the same time, otherwise none of them will be effective.

	single_multi
	# This map can be loaded as either a single player or multiple players map.

	sp_description_base_number = ...
	# The base number appears in the singleplayer game description. Spaces are ignored.

	sp_description_difficulty = ...
	# The diffuculty appears in the singleplayer game description. Spaces are ignored.

	sp_description_mission_number = ...
	# The mission number appears in the singleplayer game description. Spaces are ignored.

	sp_description_etc =@
	{
		...
	}
	# There is a small space where you can put some extra information about the mission.

	sp_description =@
	{
		...
	}
	# The description of the mission, automatically changes line so don't worry about that.

	mp_description =@
	{
		...
	}
	# The description of the mission in multiple players.
}


# The Game Features Block
# This block describes most game features.
[sp_game]
{
	lose_with_base = true
	# If the blue side loses when their base is down.

	target = .
	# Target of the map, an integer.
	# 0: Destroy enemy base(s).
	# 1: Destroy all enemy forces.
	# 2: Defense. (If no time limit is set, this is invaild and considered as 1)
	# 3: Escort. (If no escort targets specified, this is invaild and considered as 1)
	# 4: Protect

	has_time_limit = false
	# If the map has time limit (for attack or defense).

	time_limit = 0
	# The time limits. Invaild if has_time_limit is false. The unit is SECOND.

	reinforcements = false
	# If the map has reinforcements. Define reinforcement at its own block.

	maximum_money = ...
	# The maximum money you players keep in this map.

	maximum_research = ...
	# The maximum research point players can keep in this map.

	maximum_advanced_research = ...
	# The maximum advanced research point players can keep in this map.
}


# The blue side.
[sp_player1]
{
	lose_with_base = true
	# If the player lose when all the bases are down.

	advanture = true
	# If the player can respawn the advanture.

	starting_money = ...
	# Starting money of the player.

	starting_research = ...
	# Starting research point of the player.

	starting_advanced_research = ...
	# Starting advanced research point of the player.

	starting_airforce_fighter = .
	# Number of fighter at the beginning. Belows' are the same.
	
	starting_airforce_bomber = .
	starting_airforce_tripler = .
	starting_airforce_carryall = .
	starting_airforce_astron = .

	turret_1 = true
	turret_2 = true
	turret_3 = true
	turret_4 = true
	turret_5 = true
	turret_6 = true
	# Enable turrets.

	turret_6_research = true
	# If the research is required for building laser turret.

	orbital_strike_production = false
	# If the base can produce orbital strike.
}


# The green side.
[sp_player2]
{
	# Same as above, except that
	# lose_with_base is invaild since it's defined in sp_game.
}


# The definitions of escort mission.
# Invaild if sp_game.target != 3
[sp_escort]
{
	# Escort mission is to escort a or some unit(s) to sertain area.

	escort_targets =@
	{
		..., ...
	}
	# The names of the target(s), use comma (,) to separate. See below for more information about names.

	escort_area_x = ...
	escort_area_y = ...
	escort_area_w = ...
	escort_area_h = ...
	# Define the escoring area. Player wins if the escort target(s) reaches this area.

	only_one = true
	# Only one target is needed for safety escort. If false, all targets must be safe.

	targets_controllable = false
	# If the player can control the targets. Targets would not move by themselves if true.
}


# The definitions of protecting mission.
# Invaild if sp_game.target != 4
[sp_protect]
{
	# Protect mission is to protect a or some building(s) until countdown. If there is no countdown then it is invaild and considered 0,
	# although player still loses when the protecting target(s) are captured.

	protection_targets =@
	{
		..., ...
	}
	# The names of the target(s), use comma (,) to separate. See below for more information about names.
}


# Definitions of reinforcements (if any).
[sp_reinforcement]
{
	time_ea = 0
	# Time when reinforcement arrives. Counts separatly form the map time limit.

	total_waves = 0
	# Total waves of reinfocements.

	contents =@
	{
		money = ...
		research = ...
		advanced_research = ...

		airforces =@
		{
			fighter = ...
		}

		units_carry_all =@
		{
			..., ...
		}
	}
	# The contents of reinforcements.
}


# Preset buildings for the map!
[sp_building]
{
	$
	{
	unit_name = ...
	# You can define a specific unit name for escort and protecting missions. It's not necessary.

	unit_type = ...

	maximum_level = .
	current_level = .

	level_1 = ...
	level_2 = ...
	level_3 = ...
	...

	player = .
	# 0: Player
	# 1: Enemy
	# 2: Neutral

	hp = ...

	position_x = ...
	position_y = ...
	}

	$
	{
	...
	}
}


# Preset units for the map!
[sp_unit]
{
	$
	{
	unit_name = ...

	unit_type = ...

	hp = ...

	player = .
	# 0: Player
	# 1: Enemy
	# 2: Neutral

	position_x = ...
	position_y = ...
	}

	$
	{
	...
	}
}


# For multiplayer map it's pretty much the same. Invaild if single_player_only flag presents.
[mp_...]


# This block is usually for mods. All the settings here will ultimately override the data above. 
[custom]
{

}
